#!/bin/bash

# Argument 1 is mandatory
#  Posibilities for argument 1
#    --letsencrypt-first-final: Will try for real to get a secure Let's Encrypt certificate. Careful, you have just a few trys per week, like 20 or so.
#    --letsencrypt-first-test:  Will simulate to get a secure Let's Encrypt certificate. You should try this option to see if everything runs OK before trying whith the final one.
#    --letsencrypt-clean-all:   Will erase the $BASE_DIR and all of it's contents. Careful! Includes any obtained certificates that may be within.
#    --create-proction-site:    Will create a folder for a production site with nginx ready to compose-up
#    --print-cron-line:         Will print the crontab line tha you can use to renew the certificates

# This is me testing this script on sometest.example.com
DOMAIN_NAME1="sometest.example.com"
NOTIFICATION_EMAIL="somemail@anotherexample.com"

# This subdirectory will get created
BASE_DIR="./letsencrypt"
ABS_BASE_DIR="$(realpath $BASE_DIR)"

# This are the rest of the subdirectory structures
LETSENCRYPT_DIR="$BASE_DIR/letsencrypt"
LETSENCRYPT_SITE_DIR="$LETSENCRYPT_DIR/site"
PRODUCTION_DIR="$BASE_DIR/production"
PRODUCTION_SITE_DIR="$PRODUCTION_DIR/site"
PRODUCTION_DHPARAM_DIR="$PRODUCTION_DIR/dh-param"

# Notes for use of DOMAIN_NAME1 and DOMAIN_NAME2
#DOAIN_NAME1="rootdomain.com"
#DOAIN_NAME2="www.rootdomain.com"

print_letsencrypt_dockercompose_yml() {
echo "version: '3.1'
services:
    letsencrypt-nginx-container:
        container_name: 'letsencrypt-nginx-container'
        image: nginx:latest
        ports:
        - '80:80'
        volumes:
        - ./nginx.conf:/etc/nginx/conf.d/default.conf
        - ./site:/usr/share/nginx/html
    #    networks:
    #      - docker-network
    #
    #networks:
    #  docker-network:
    #    driver: bridge
"
}

print_letsencrypt_nginx_conf() {
echo "server {
    listen 80;
    listen [::]:80;
    server_name $DOMAIN_NAME1 $DOMAIN_NAME2;

    location ~ /.well-known/acme-challenge {
        allow all;
        root /usr/share/nginx/html;
    }

    root /usr/share/nginx/html;
    index index.html;
}
"
}

print_letsencrypt_index_html() {
    echo "<!DOCTYPE html>
<html>
 <head>
    <meta charset=\"utf-8\" />
    <title>Let's Encrypt First Time Cert Issue Site</title>
 </head>
 <body>
    <h1>Oh, hai there!</h1>
    <p>
        This is the temporary site that will only be used for the very first time SSL certificates are issued by Let's Encrypt's
        certbot.
    </p>
 </body>
</html>
"
}

print_production_dockercompose_yml() {
echo "version: '3.1'
services:

  production-nginx-container:
    container_name: 'production-nginx-container'
    image: nginx:latest
    ports:
      - \"80:80\"
      - \"443:443\"
    volumes:
      - ./production.conf:/etc/nginx/conf.d/default.conf
      - ./site:/usr/share/nginx/html
      - ./dh-param/dhparam-2048.pem:/etc/ssl/certs/dhparam-2048.pem
      - ../volumes/etc/letsencrypt/live/$DOMAIN_NAME1/fullchain.pem:/etc/letsencrypt/live/$DOMAIN_NAME1/fullchain.pem
      - ../volumes/etc/letsencrypt/live/$DOMAIN_NAME1/privkey.pem:/etc/letsencrypt/live/$DOMAIN_NAME1/privkey.pem
  #  networks:
  #    - docker-network
  #networks:
  #  docker-network:
  #    driver: bridge
"
}

print_production_nginx_conf() {
echo "server {
    listen      80;
    listen [::]:80;
    server_name $DOMAIN_NAME1;

    location / {
        rewrite ^ https://\$host\$request_uri? permanent;
    }

    #for certbot challenges (renewal process)
    location ~ /.well-known/acme-challenge {
        allow all;
        root /data/letsencrypt;
    }
}

#https://$DOMAIN_NAME1
server {
    server_name $DOMAIN_NAME1;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_tokens off;

    ssl on;

    ssl_buffer_size 8k;
    ssl_dhparam /etc/ssl/certs/dhparam-2048.pem;

    ssl_protocols TLSv1.2 TLSv1.1;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

    ssl_ecdh_curve secp384r1;
    ssl_session_tickets off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4;

    ssl_certificate /etc/letsencrypt/live/$DOMAIN_NAME1/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN_NAME1/privkey.pem;

    root /usr/share/nginx/html;
    index index.html;
    location / {
        #security headers
        add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\";
        add_header X-XSS-Protection \"1; mode=block\" always;
        add_header X-Content-Type-Options \"nosniff\" always;
        add_header X-Frame-Options \"DENY\" always;
        #CSP
        #add_header Content-Security-Policy \"frame-src 'self'; default-src 'self'; script-src 'self' 'unsafe-inline' https://maxcdn.bootstrapcdn.com https://ajax.googleapis.com; img-src 'self'; style-src 'self' https://maxcdn.bootstrapcdn.com; font-src 'self' data: https://maxcdn.bootstrapcdn.com; form-action 'self'; upgrade-insecure-requests;\" always;
        add_header Content-Security-Policy \"frame-src 'self'; default-src 'self'; img-src 'self'; style-src 'self' https://maxcdn.bootstrapcdn.com; font-src 'self' data: https://maxcdn.bootstrapcdn.com; form-action 'self'; upgrade-insecure-requests;\" always;
        add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;
        add_header Feature-Policy \"vibrate 'none'; geolocation 'none'\" always;
    }
}
"
}

create_dhparam_file() {
    set -x
    sudo openssl dhparam -out $ABS_PRODUCTION_DHPARAM_DIR/dhparam-2048.pem 2048
    set +x
}

create_letsencrypt_folders_and_files () 
{
    if [ -d "$BASE_DIR" ]; then
        echo "Error: $BASE_DIR already exists"
        exit 2
    fi
    mkdir -p "$LETSENCRYPT_SITE_DIR"

    print_letsencrypt_dockercompose_yml > "$LETSENCRYPT_DIR/docker-compose.yml"

    print_letsencrypt_nginx_conf > "$LETSENCRYPT_DIR/nginx.conf"

    # an index page
    print_letsencrypt_index_html > "$LETSENCRYPT_SITE_DIR/index.html"

    return 0
}

composeup_letsencrypt_firsttime() {
    PREV_DIR="$(pwd)"
    set -x
    cd $LETSENCRYPT_DIR
    sudo docker-compose up -d
    set +x
    cd "$PREV_DIR"
}

cleanup_letsencrypt_folders_and_files_all() {
    set -x
    sudo rm -rfv $ABS_BASE_DIR
    sudo docker-compose up -d
    set +x
}



if [ "$1" == "--letsencrypt-first-final" ]; then
    create_letsencrypt_folders_and_files

    composeup_letsencrypt_firsttime

    #echo "You asked for production, but we are no ready for production so I just let you know what we would do if production where ready
    echo "Obteniendo certificados de seguridad de Let's encrypt
    
    "
    set -x
    sudo docker run -it --rm \
    -v "$(realpath $BASE_DIR)/volumes/etc/letsencrypt":/etc/letsencrypt \
    -v "$(realpath $BASE_DIR)/volumes/var/lib/letsencrypt":/var/lib/letsencrypt \
    -v "$(realpath $BASE_DIR)/volumes/var/log/letsencrypt":/var/log/letsencrypt \
    -v "$(realpath $LETSENCRYPT_SITE_DIR)":/data/letsencrypt \
    certbot/certbot \
    certonly --webroot \
    --email "$NOTIFICATION_EMAIL" --agree-tos --no-eff-email \
    --webroot-path=/data/letsencrypt \
    -d $DOMAIN_NAME1
    #-d $DOMAIN_NAME1 -d $DOMAIN_NAME2

    set +x
    echo "
    
    That's it"
elif [ "$1" == "--letsencrypt-first-test" ]; then
    create_letsencrypt_folders_and_files

    composeup_letsencrypt_firsttime

    pwd
    echo "Ejecutando prueba con letsencrypt"
    echo ""
    set -x
    sudo docker run -it --rm \
    -v "$(realpath $BASE_DIR)/volumes/etc/letsencrypt":/etc/letsencrypt \
    -v "$(realpath $BASE_DIR)/volumes/var/lib/letsencrypt":/var/lib/letsencrypt \
    -v "$(realpath $BASE_DIR)/volumes/var/log/letsencrypt":/var/log/letsencrypt \
    -v "$(realpath $LETSENCRYPT_SITE_DIR)":/data/letsencrypt \
    certbot/certbot \
    certonly --webroot \
    --register-unsafely-without-email --agree-tos \
    --webroot-path=/data/letsencrypt \
    --staging \
    -d $DOMAIN_NAME1
    #-d $DOMAIN_NAME1 -d $DOMAIN_NAME2
    set +x
    exit 0
elif [ "$1" == "--letsencrypt-clean-all" ]; then
    cleanup_letsencrypt_folders_and_files_all
    exit 0
elif [ "$1" == "--create-proction-site" ]; then
    mkdir -p "$PRODUCTION_SITE_DIR"
    mkdir -p "$PRODUCTION_DHPARAM_DIR"
    ABS_PRODUCTION_DHPARAM_DIR="$(realpath $PRODUCTION_DHPARAM_DIR)"

    print_production_dockercompose_yml > $PRODUCTION_DIR/docker-compose.yml
    print_production_nginx_conf > $PRODUCTION_DIR/production.conf
    create_dhparam_file
    echo ""
    echo "Now you can publish your site in the folder: $PRODUCTION_SITE_DIR"
    echo ""
    echo "When you are ready to, go online like this:"
    echo " $> cd $PRODUCTION_DIR"
    echo " $> sudo docker-compose up -d"
    echo ""
    echo "To test your security you can go to this two:"
    echo " - https://ssllabs.com to test the certificates"
    echo " - https://securityheaders.io to test your headers"
    echo ""
    echo "Your site is: https://$DOMAIN_NAME1"
    echo ""
    echo ""
    echo "Tha's all we know"
    exit 0
elif [ "$1" == "--print-cron-line" ]; then
    echo "0 23 * * * docker run --rm -it --name certbot -v \"$(realpath $BASE_DIR)/volumes/etc/letsencrypt:/etc/letsencrypt\" -v \"$(realpath $BASE_DIR)/volumes/var/lib/letsencrypt:/var/lib/letsencrypt\" -v \"$(realpath $BASE_DIR)/volumes/var/log/letsencrypt:/var/log/letsencrypt\" -v \"$(realpath $BASE_DIR)/volumes/data/letsencrypt:/data/letsencrypt\" certbot/certbot renew --webroot -w /data/letsencrypt --quiet && docker kill --signal=HUP production-nginx-container"
    exit 0
else
    echo "Argument 1 not recognized OR not present."
    echo " Arg1: $1"
    echo ""
    echo "Fail"
    exit 1
fi
